#include "ns3/core-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/network-module.h"
#include "ns3/applications-module.h"
#include "ns3/mobility-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/yans-wifi-helper.h"
#include "ns3/ssid.h"
// Default Network Topology
//
// Wifi 10.1.3.0
// AP
// * * * *
// | | | | 10.1.1.0
// n5 n6 n7 n0 -------------- n1 n2 n3 n4
// point-to-point | | | |
// ================
// LAN 10.1.2.0
using namespace ns3;
NS_LOG_COMPONENT_DEFINE ("ThirdScriptExample");
int
main (int argc, char *argv[])
{
 bool verbose =
true; uint32_t
nCsma = 3;
uint32_t nWifi = 3;
bool tracing = false;
//purpose of the command line its display the any errors
CommandLine cmd;
cmd.AddValue ("nCsma", "Number of \"extra\" CSMA nodes/devices",
nCsma);
cmd.AddValue ("nWifi", "Number of wifi STA devices", nWifi);

cmd.AddValue ("verbose", "Tell echo applications to log if true", verbose);
 cmd.Parse (argc,argv);
 // The underlying restriction of 18 is due to the grid
position // allocator's configuration; the grid layout will
exceed the // bounding box if more than 18 nodes are
provided.
 if (nWifi > 18)
 {
 std::cout << "nWifi should be 18 or less; otherwise grid layout exceeds the bounding box"
<< std::endl; return 1;
 }
 if (verbose)
 {
 LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
 LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);
 }
//create the point to point node and assigned delay and bandwidth of the p2p
nodes
 NodeContainer p2pNodes;
 p2pNodes.Create (2);
 PointToPointHelper pointToPoint;
 pointToPoint.SetDeviceAttribute("DataRate",StringValue("5Mbps"));
 pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));
 //Create the network device(ethernet card) and install p2p nodes into the
network device
 NetDeviceContainer p2pDevices;
 p2pDevices = pointToPoint.Install (p2pNodes);
//create the csma node and assigned delay and bandwidth of the csma nodes
 NodeContainer csmaNodes;
 csmaNodes.Add (p2pNodes.Get (1));
 csmaNodes.Create (nCsma);
 CsmaHelper csma; csma.SetChannelAttribute ("DataRate",StringValue ("100Mbps"));
 csma.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (6560)));
//Create the network device (ethernet card) and install p2p nodes into the
network device
 NetDeviceContainer csmaDevices;
 csmaDevices = csma.Install (csmaNodes);
//create wirless networks
 NodeContainer wifiStaNodes;
 wifiStaNodes.Create (nWifi); //n5,n6,and n7
 NodeContainer wifiApNode = p2pNodes.Get (0); //n0 is a access point of the wifi network
 //YANS-Yet Another Network Simulator //used default channel allocation
 YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
//physical layer in this code physical layer also default (wifi frequency and other
parameters are default)
 YansWifiPhyHelper phy = YansWifiPhyHelper::Default ();
//create the channel for communication path
 phy.SetChannel (channel.Create ());
 //wifi access need station so using wifiHelper class for assigned station of the wifi
 network //In this example AarfWifiManager WifiHelper wifi;
 wifi.SetRemoteStationManager ("ns3::AarfWifiManager");
 //mac- media access control //ssid broadcast id
 WifiMacHelper mac;
//name of the ssid is ‘ns-3-ssid’
 Ssid ssid = Ssid ("ns-3-ssid");
//what kind of mac
//set type station wifi mac //ActiveProbing means they keep try to check any wifi
signal available in the near by area(false)
mac.SetType ("ns3::StaWifiMac", "Ssid", SsidValue (ssid), "ActiveProbing",
BooleanValue
 (false));
//create the net device and install
 NetDeviceContainer staDevices;
 staDevices = wifi.Install (phy, mac, wifiStaNodes);
//access point node this is fixed
mac.SetType ("ns3::ApWifiMac", "Ssid",SsidValue (ssid));
 NetDeviceContainer apDevices;
 apDevices = wifi.Install (phy, mac, wifiApNode);
//every wireless node have mobility nodes
MobilityHelper mobility;
//name of the grid position allocator is ns3
mobility.SetPositionAllocator ("ns3::GridPositionAllocator",
 "MinX", DoubleValue (0.0),
 "MinY", DoubleValue (0.0),
 "DeltaX", DoubleValue (5.0),
 "DeltaY", DoubleValue (10.0),
 "GridWidth", UintegerValue (3),
 "LayoutType", StringValue ("RowFirst"));
//two dimesional mobility model //Rectangle (-50, 50, -50, 50) this mean which
point mobility nodes move
mobility.SetMobilityModel ("ns3::RandomWalk2dMobilityModel",
"Bounds", RectangleValue (Rectangle (-50, 50, -50, 50)));
mobility.Install (wifiStaNodes);
//ConstantPositionMobilityModel it means this mobilitty model near move
because commomly access point is fixed
mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
mobility.Install (wifiApNode);
//create the internet protocol and install the nodes into that protocol //we didn’t
install point-to-point nodes into the internet protocol because //wifiApNode(n0)
is part of p2p and wifi the same like csmaNodes(n1,n2,n3,n4)
//n1 is the part p2p and csma that the reason we didnt install p2p on internet
protocol
 InternetStackHelper stack; stack.Install (csmaNodes); stack.Install (wifiApNode);
 stack.Install (wifiStaNodes);

Ipv4AddressHelper address;
//assigned base address to the p2p
nodes address.SetBase ("10.1.1.0",
"255.255.255.0"); Ipv4InterfaceContainer
p2pInterfaces;
p2pInterfaces = address.Assign (p2pDevices);
//assigned base address to the csma
nodes address.SetBase ("10.1.2.0",
"255.255.255.0"); Ipv4InterfaceContainer
csmaInterfaces; csmaInterfaces =
address.Assign (csmaDevices);
//assigned base address to the wifi nodes
address.SetBase ("10.1.3.0",
"255.255.255.0"); address.Assign
(staDevices);
address.Assign (apDevices);
//Assigned the port for the server
UdpEchoServerHelper echoServer (9);
//install application on the server node. And assign server start and stop
time. ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get
(nCsma)); serverApps.Start (Seconds (1.0));
serverApps.Stop (Seconds (10.0));
//Create the client and assigned server details(server port 9) on the
client UdpEchoClientHelper echoClient
(csmaInterfaces.GetAddress(nCsma),9);
echoClient.SetAttribute("MaxPackets",UintegerValue(1));
echoClient.SetAttribute("Interval",TimeValue(Seconds(1.0)));
echoClient.SetAttribute ("PacketSize", UintegerValue (1024));
 ApplicationContainer clientApps =
 echoClient.Install (wifiStaNodes.Get (nWifi – 1));
//wifiStaNodes.Get (nWifi – 1) it means nwifi=3 so wifiStaNodes.Get(2) that node
is n7
 clientApps.Start (Seconds (2.0));
 clientApps.Stop (Seconds (10.0));
//what kind of routing algorithms used in this time used default routing
 Ipv4GlobalRoutingHelper::PopulateRoutingTables ();
 Simulator::Stop (Seconds (10.0));
 if (tracing == true)
 {
 pointToPoint.EnablePcapAll("third");
 phy.EnablePcap ("third", apDevices.Get (0));
 csma.EnablePcap ("third", csmaDevices.Get (0), true);
 }
 Simulator::Run ();
 Simulator::Destroy ();
 return 0;
} 